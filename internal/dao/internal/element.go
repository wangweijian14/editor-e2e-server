// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// ElementDao is the data access object for table element.
type ElementDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns ElementColumns // columns contains all the column names of Table for convenient usage.
}

// ElementColumns defines and stores column names for table element.
type ElementColumns struct {
	Id          string //
	Name        string //
	Description string //
	PageId      string //
	Path        string //
	Attribute   string //
	Father      string //
}

// elementColumns holds the columns for table element.
var elementColumns = ElementColumns{
	Id:          "id",
	Name:        "name",
	Description: "description",
	PageId:      "page_id",
	Path:        "path",
	Attribute:   "attribute",
	Father:      "father",
}

// NewElementDao creates and returns a new DAO object for table data access.
func NewElementDao() *ElementDao {
	return &ElementDao{
		group:   "default",
		table:   "element",
		columns: elementColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ElementDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *ElementDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *ElementDao) Columns() ElementColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *ElementDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ElementDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ElementDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
